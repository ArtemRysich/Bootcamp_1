// –ú—É—Ç–∞–±–µ–ª—å–Ω—ñ —Ç–∞ —ñ–º—É—Ç–∞–±–µ–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
// https://developer.mozilla.org/en-US/docs/Glossary/Mutable
// const clients = ["Mango", "Poly", "Ajax"];
// const string = "script";

// –Ü–º—É—Ç–∞–±–µ–ª—å–Ω—ñ
// const firstEl = string[0];
// string[0] = "p"
// console.log(string);

// –ú—É—Ç–∞–±–µ–ª—å–Ω—ñ
// const firstEl = clients[0]
// clients[0] = "Kiwi"
// console.log(clients);


// Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ Jazz —ñ Blues.
// –î–æ–¥–∞–π—Ç–µ "Rock'n'roll" –≤ –∫—ñ–Ω–µ—Ü—å.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

// const genres = ['Jazz', 'Blues'];
// genres.push("Rock'n'roll")// push –¥–æ–¥–∞—î –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É
// const firstEl = genres[0];
// const lastEl = genres[genres.length - 1];
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/shift
// const firstELDelete = genres.shift() //–í–∏–¥–∞–ª—è—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –ó–ù–ê–ß–ï–ù–ù–Ø
// const firstELDelete = genres.splice(0,1) // –í–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º —Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∏–¥–∞–ª–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ —è–∫–æ—Å—Ç—ñ –º–∞—Å–∏–≤—É
// genres.unshift("Country","Reggae")// unshift –¥–æ–¥–∞—î –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –µ–ª–µ–º–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É
// genres.splice(0,0,"Country","Reggae")// splice –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é
// console.log(genres);




// Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π –≤–µ–ª–∏—á–∏–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = '8 11';
// const valueToArr = values.split(' ')
// const first = Number(valueToArr[0]);
// const last = valueToArr[valueToArr.length -1]
// const last = Number(valueToArr[1]);

// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/isNaN
// window.isNaN// –ø—Ä–∏–º—É—Å–æ–≤–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö Number

// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
// Number.isNaN// –ø—Ä–∏–º—É—Å–æ–≤–æ –ü–ï–†–ï–í–û–î–ò–¢–¨ –¥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö Number


// console.log(Number.isNaN('8 11'));
// if (!isNaN(first) && !isNaN(last)) {
//     console.log('first', first);
//     console.log('last', last);
//     console.log(first * last);
// }else{
//     console.log('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ');
// }


// Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0, number = 1; i < fruits.length; i += 1, number+=1) {
//     console.log(`–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä ${number}`, fruits[i]);
// }




// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —ñ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// const names = 'Jacob,William,Solomon,Kate';
// const phones = '89001234567,89001112233,890055566377';

// const namesToArr = names.split(',');
// const phonesToArr = phones.split(',')

// for (let i = 0; i < namesToArr.length; i += 1) {
//     if (i < phonesToArr.length) {
//         console.log(`${namesToArr[i]} –º–∞—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ${phonesToArr[i]}`);
//     }else {
//         console.log(`${namesToArr[i]} –Ω–µ–º–∞—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É `);
//     }
// }


// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ–±—ñ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';
// const strToArr = string.split(' ');
// strToArr.splice(0,1)
// strToArr.pop()// –≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
// strToArr.splice(strToArr.length - 1,1)
// strToArr.splice(-1, 1)
// strToArr.splice(-1)
// console.log(strToArr);




// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≤–µ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const strToArr = string.split('');
// // reverse —Ä–æ–∑–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤
// const reverse = strToArr.reverse();
// const arrToStr = reverse.join('')
// console.log(arrToStr);


// const string = 'Welcome to the future';
// const strToArr = string.split('');
// const arrToStr = strToArr.reverse().join('')
// console.log(arrToStr);


// const string = 'Welcome to the future';
// const arrToStr = string.split('').reverse().join('');
// console.log(arrToStr);



// Example 7 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.
// const numbers = [101, 78, 12, 76, 5, 11, 9];
// let min = numbers[0]; //101
// for (const number of numbers) {
//     if (number < min){
//         min = number
//     }
// }

//  0,1,2,3,4,5,6 –¥–æ 7
//  1,2,3,4,5,6 –¥–æ 7

// for (let i = 1; i < numbers.length; i += 1) {
//     if (numbers[i] < min) {
//         min = number
//     }
// }





// const arr1 = [0,1,2].includes(0) === true
// const arr = [5,1,2].includes(0) === false


// const arr2 = [0,14,2].indexOf(14) === 1
// const arr3 = [0,19,2].indexOf(14) === -1